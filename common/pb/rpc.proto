syntax = "proto3";
package pb;

option go_package = "common/pb";

import "xuperos/common/pb/googleapis/google/api/annotations.proto";
import "xupercore/bcs/ledger/xledger/xldgpb/xledger.proto";
import "xupercore/protos/contract.proto";
import "xupercore/protos/permission.proto";

enum XChainErrorEnum {
  SUCCESS = 0;
  UNKNOW_ERROR = 1;
  CONNECT_REFUSE = 2;
  NOT_ENOUGH_UTXO_ERROR = 3;
  UTXOVM_ALREADY_UNCONFIRM_ERROR = 4;
  UTXOVM_NOT_FOUND_ERROR = 5;
  INPUT_OUTPUT_NOT_EQUAL_ERROR = 6;
  TX_NOT_FOUND_ERROR = 7;
  TX_SIGN_ERROR = 8;
  BLOCKCHAIN_NOTEXIST = 9;
  VALIDATE_ERROR = 10;
  CANNOT_SYNC_BLOCK_ERROR = 11;
  CONFIRM_BLOCK_ERROR = 12;
  UTXOVM_PLAY_ERROR = 13;
  WALK_ERROR = 14;
  NOT_READY_ERROR = 15;
  BLOCK_EXIST_ERROR = 16;
  ROOT_BLOCK_EXIST_ERROR = 17;
  TX_DUPLICATE_ERROR = 19;
  SERVICE_REFUSED_ERROR = 20;
  TXDATA_SIGN_ERROR = 21;
  TX_SLE_ERROR = 25;
  TX_FEE_NOT_ENOUGH_ERROR = 26;
  UTXO_SIGN_ERROR = 28;
  DPOS_QUERY_ERROR = 31;
  RWSET_INVALID_ERROR = 33;
  RWACL_INVALID_ERROR = 34;
  GAS_NOT_ENOUGH_ERROR = 35;
  TX_VERSION_INVALID_ERROR = 36;
  COMPLIANCE_CHECK_NOT_APPROVED = 37;
  ACCOUNT_CONTRACT_STATUS_ERROR = 38;
  TX_VERIFICATION_ERROR = 40;
}

// View option to be choosed (only used in status filter currently)
enum ViewOption {
  // Without any flag: Default
  NONE = 0;
  // Ledger flag: Get Ledger Info
  LEDGER = 1;
  // Utxo flag: Get UTXO Info
  UTXOINFO = 2;
  // Branch flag: Get BranchId Info
  BRANCHINFO = 3;
  // Peers flag: Get Peers Info
  PEERS = 4;
}

// Xchain is the main interfaces
service Xchain {

  // SelectUTXOBySize merge many utxos into a few of utxos
  rpc SelectUTXOBySize(UtxoRequest) returns (UtxoResponse) {
    option (google.api.http) = {
      post : "/v1/select_utxo_by_size"
      body : "*"
    };
  }

  // PostTx post Transaction to a node
  rpc PostTx(TxStatus) returns (CommonReply) {
    option (google.api.http) = {
      post : "/v1/post_tx"
      body : "*"
    };
  }

  rpc QueryACL(AclStatus) returns (AclStatus) {
    option (google.api.http) = {
      post : "/v1/query_acl"
      body : "*"
    };
  }

  rpc QueryUtxoRecord(UtxoRecordDetails) returns (UtxoRecordDetails) {
    option (google.api.http) = {
      post : "/v1/query_utxo_record"
      body : "*"
    };
  }

  rpc QueryContractStatData(ContractStatDataRequest)
      returns (ContractStatDataResponse) {
    option (google.api.http) = {
      post : "/v1/query_contract_stat_data"
      body : "*"
    };
  }

  rpc GetAccountContracts(GetAccountContractsRequest)
      returns (GetAccountContractsResponse) {
    option (google.api.http) = {
      post : "/v1/get_account_contracts"
      body : "*"
    };
  }

  // QueryTx query Transaction by TxStatus,
  // Bcname and Txid are required for this
  rpc QueryTx(TxStatus) returns (TxStatus) {
    option (google.api.http) = {
      post : "/v1/query_tx"
      body : "*"
    };
  }

  // GetBalance get balance of an address,
  // Address is required for this
  rpc GetBalance(AddressStatus) returns (AddressStatus) {
    option (google.api.http) = {
      post : "/v1/get_balance"
      body : "*"
    };
  }

  // GetFrozenBalance get two kinds of balance
  // 1. Still be frozen of an address
  // 2. Available now of an address
  // Address is required for this
  rpc GetBalanceDetail(AddressBalanceStatus) returns (AddressBalanceStatus) {
    option (google.api.http) = {
      post : "/v1/get_balance_detail"
      body : "*"
    };
  }

  // GetFrozenBalance get balance that still be frozen of an address,
  // Address is required for this
  rpc GetFrozenBalance(AddressStatus) returns (AddressStatus) {
    option (google.api.http) = {
      post : "/v1/get_frozen_balance"
      body : "*"
    };
  }

  // GetBlock get block by blockid and return if the block in trunk or in branch
  rpc GetBlock(BlockID) returns (Block) {
    option (google.api.http) = {
      post : "/v1/get_block"
      body : "*"
    };
  }

  // GetBlockByHeight get block by height and return if the block in trunk or in
  // branch
  rpc GetBlockByHeight(BlockHeight) returns (Block) {
    option (google.api.http) = {
      post : "/v1/get_block_by_height"
      body : "*"
    };
  }

  rpc GetBlockChainStatus(BCStatus) returns (BCStatus) {
    option (google.api.http) = {
      post : "/v1/get_bcstatus"
      body : "*"
    };
  }

  // Get blockchains query blockchains
  rpc GetBlockChains(CommonIn) returns (BlockChains) {
    option (google.api.http) = {
      get : "/v1/get_bcchains"
      // body: "*"
    };
  }

  // GetSystemStatus query system status
  rpc GetSystemStatus(CommonIn) returns (SystemsStatusReply) {
    option (google.api.http) = {
      post : "/v1/get_sysstatus"
      body : "*"
    };
  }

  // GetNetURL return net url
  rpc GetNetURL(CommonIn) returns (RawUrl) {
    option (google.api.http) = {
      post : "/v1/get_net_url"
      body : "*"
    };
  }

  // 新的Select utxos接口, 不需要签名，可以支持选择账户的utxo
  rpc SelectUTXO(UtxoRequest) returns (UtxoResponse) {
    option (google.api.http) = {
      post : "/v1/select_utxos_v2"
      body : "*"
    };
  }

  // PreExecWithSelectUTXO preExec & selectUtxo
  rpc PreExecWithSelectUTXO(PreExecWithSelectUTXORequest)
      returns (PreExecWithSelectUTXOResponse) {
    option (google.api.http) = {
      post : "/v1/preexec_select_utxo"
      body : "*"
    };
  }

  // GetAccountByAK get account sets contain a specific address
  rpc GetAccountByAK(AK2AccountRequest) returns (AK2AccountResponse) {
    option (google.api.http) = {
      post : "/v1/get_account_by_ak"
      body : "*"
    };
  }

  // GetAddressContracts get contracts of accounts contain a specific address
  rpc GetAddressContracts(AddressContractsRequest)
      returns (AddressContractsResponse) {
    option (google.api.http) = {
      post : "/v1/get_address_contracts"
      body : "*"
    };
  }

  //预执行合约
  rpc PreExec(InvokeRPCRequest) returns (InvokeRPCResponse) {
    option (google.api.http) = {
      post : "/v1/preexec"
      body : "*"
    };
  }
}

message Header {
  string logid = 1; //如果logid没填写，生成一个
  string from_node = 2; // call rpc client address，客户端可以为空，节点一定要写自己的address
  XChainErrorEnum error = 3;
}

message TxStatus {
  Header header = 1;
  string bcname = 2;
  bytes txid = 3;
  xldgpb.TransactionStatus status = 4; //当前状态
  int64 distance = 5;           //离主干末端的距离（如果在主干上)
  xldgpb.Transaction tx = 7;
}

message CommonReply {
  Header header = 1;
}

message InvokeRPCRequest {
  Header header = 1;
  string bcname = 2;
  repeated protos.InvokeRequest requests = 3;
  string initiator = 4;
  repeated string auth_require = 5;
}

message InvokeRPCResponse {
  Header header = 1;
  string bcname = 2;
  protos.InvokeResponse response = 3;
}

// PreExecWithSelectUTXORequest preExec + selectUtxo for request
message PreExecWithSelectUTXORequest {
  Header header = 1;
  string bcname = 2;
  string address = 3;
  int64 totalAmount = 4;
  protos.SignatureInfo signInfo = 6;
  bool needLock = 7;
  InvokeRPCRequest request = 5;
}

// PreExecWithSelectUTXOResponse preExec + selectUtxo for response
message PreExecWithSelectUTXOResponse {
  Header header = 1;
  string bcname = 2;
  protos.InvokeResponse response = 3;
  // for preExec & selectUTXO
  xldgpb.UtxoOutput utxoOutput = 4;
}

// UtxoRequest query info to query utxos
message UtxoRequest {
  Header header = 1;
  // which bcname to select
  string bcname = 2;
  // address to select
  string address = 3;
  // publickey of the address
  string publickey = 4;
  // totalNeed refer the total need utxos to select
  string totalNeed = 5;
  // userSign of input
  bytes userSign = 7;
  // need lock
  bool needLock = 8;
}

// UtxoResponse query results
message UtxoResponse {
  Header header = 1;
  // outSign return the output
  // bytes outSign = 2;
  // utxo list
  repeated xldgpb.Utxo utxoList = 2;
  // total selected amount
  string totalSelected = 3;
}

message ContractStatDataRequest {
  Header header = 1;
  string bcname = 2;
}

message ContractStatDataResponse {
  Header header = 1;
  string bcname = 2;
  protos.ContractStatData data = 3;
}

message UtxoRecordDetails {
  Header header = 1;
  string bcname = 2;
  string accountName = 3;
  xldgpb.UtxoRecord openUtxoRecord = 4;
  xldgpb.UtxoRecord lockedUtxoRecord = 5;
  xldgpb.UtxoRecord frozenUtxoRecord = 6;
  int64 displayCount = 7;
}

// 查询Acl
message AclStatus {
  Header header = 1;
  string bcname = 2;
  string accountName = 3;
  string contractName = 4;
  string methodName = 5;
  bool confirmed = 6;
  protos.Acl acl = 7;
}

// Query account contracts request
message GetAccountContractsRequest {
  Header header = 1;
  string bcname = 2;
  string account = 3;
}

// Query account contracts response
message GetAccountContractsResponse {
  Header header = 1;
  repeated protos.ContractStatus contracts_status = 2;
}

message AddressStatus {
  Header header = 1;
  string address = 2;
  repeated TokenDetail bcs = 3;
}

message TokenDetail {
  string bcname = 1;
  string balance = 2;
  XChainErrorEnum error = 3;
}


message AddressBalanceStatus {
  Header header = 1;
  string address = 2;
  repeated TokenFrozenDetails tfds = 3;
}

message TokenFrozenDetails {
  string bcname = 1;
  repeated xldgpb.BalanceDetailInfo tfd = 2;
  XChainErrorEnum error = 3;
}

message TokenFrozenDetail {
  string balance = 1;
  bool isFrozen = 2;
}

message BlockID {
  Header header = 4;
  string bcname = 1;
  bytes blockid = 2;
  // if need content
  bool need_content = 3; //是否需要内容
}

message BlockHeight {
  Header header = 3;
  string bcname = 1;
  int64 height = 2;
}

message Block {
  Header header = 1;
  string bcname = 2;
  bytes blockid = 3;
  enum EBlockStatus {
    ERROR = 0;
    TRUNK = 1;
    BRANCH = 2;
    NOEXIST = 3;
  }
  EBlockStatus status = 4;
  xldgpb.InternalBlock block = 5;
}

// BlockChain status
message BCStatus {
  Header header = 1;
  // block name
  string bcname = 2;
  // ledger metadata
  xldgpb.LedgerMeta meta = 3;
  // The information of the longest block
  xldgpb.InternalBlock block = 4;
  // Utox information
  xldgpb.UtxoMeta utxoMeta = 5;
  // Branch info
  repeated string branchBlockid = 6;
}

message BCTipStatus {
  Header header = 1;
  bool is_trunk_tip = 2;
}

message CommonIn {
  Header header = 1;
  ViewOption view_option = 2;
}

message BlockChains {
  Header header = 1;
  repeated string blockchains = 2;
}

message SystemsStatusReply {
  Header header = 1;
  SystemsStatus systems_status = 2;
}

message SystemsStatus {
  Header header = 1;
  repeated BCStatus bcs_status = 2;
  Speeds speeds = 3;
  repeated string peerUrls = 4;
}

message Speeds {
  map<string, double> SumSpeeds = 1;
  map<string, BCSpeeds> BcSpeeds = 2;
}

message BCSpeeds {
  map<string, double> BcSpeed = 1;
}

// RawUrl return the node's  connect url
message RawUrl {
  Header header = 1;
  string rawUrl = 2;
}

message AK2AccountRequest {
  Header header = 1;
  string bcname = 2;
  string address = 3;
}

message AK2AccountResponse {
  Header header = 1;
  string bcname = 2;
  repeated string account = 3;
}

// Query address contracts request
message AddressContractsRequest {
  Header header = 1;
  string bcname = 2;
  string address = 3;
  bool need_content = 4;
}

// Query address contracts response
message AddressContractsResponse {
  Header header = 1;
  map<string, ContractList> contracts = 2;
}

message ContractList {
  repeated protos.ContractStatus contract_status = 1;
}
